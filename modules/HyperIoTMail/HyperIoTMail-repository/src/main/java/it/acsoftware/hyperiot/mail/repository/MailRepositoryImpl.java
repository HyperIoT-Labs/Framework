/*
 * Copyright 2019-2023 ACSoftware
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package it.acsoftware.hyperiot.mail.repository;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Enumeration;


import javax.persistence.NoResultException;

import it.acsoftware.hyperiot.base.util.BuildProperties;
import org.apache.aries.jpa.template.JpaTemplate;
import org.apache.aries.jpa.template.TransactionType;
import org.osgi.framework.Bundle;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import it.acsoftware.hyperiot.base.repository.HyperIoTBaseRepositoryImpl;
import it.acsoftware.hyperiot.base.util.HyperIoTUtil;
import it.acsoftware.hyperiot.mail.api.MailRepository;
import it.acsoftware.hyperiot.mail.model.MailTemplate;

/**
 * @author Aristide Cittadino Implementation class of the Mail. This class is
 * used to interact with the persistence layer.
 */
@Component(service = MailRepository.class, immediate = true)
public class MailRepositoryImpl extends HyperIoTBaseRepositoryImpl<MailTemplate>
    implements MailRepository {
    /**
     * Injecting the JpaTemplate to interact with database
     */
    private JpaTemplate jpa;

    /**
     * Constructor for a MailRepositoryImpl
     */
    public MailRepositoryImpl() {
        super(MailTemplate.class);
    }

    /**
     * @return The current jpaTemplate
     */
    @Override
    protected JpaTemplate getJpa() {
        getLog().debug( "invoking getJpa, returning: {}", jpa);
        return jpa;
    }

    /**
     * @param jpa Injection of JpaTemplate
     */
    @Override
    @Reference(target = "(osgi.unit.name=hyperiot-mail-persistence-unit)")
    protected void setJpa(JpaTemplate jpa) {
        getLog().debug( "invoking setJpa, setting: {}", jpa);
        this.jpa = jpa;
    }

    @Override
    public MailTemplate findByName(String name) {
        getLog().debug( "Repository findByName " + name);
        return this.getJpa().txExpr(TransactionType.Required, entityManager -> {
            getLog().debug( "Transaction found, invoke findByUsername");
            MailTemplate template = entityManager
                .createQuery("from MailTemplate mt where mt.name=:name ", MailTemplate.class)
                .setParameter("name", name).getSingleResult();
            getLog().debug( "Query results: {}", template);
            return template;
        });
    }

    public void createTemplate(Bundle bundle,String templatesPath) {
        try {
            Enumeration<URL> staticTemplates = bundle.findEntries(templatesPath,
                "*.ftl", true);
            while (staticTemplates.hasMoreElements()) {
                URL templatePath = staticTemplates.nextElement();
                int indexOfFileName = templatePath.getPath().lastIndexOf('/');
                if (indexOfFileName > 0) {
                    String name = templatePath.getPath().substring(indexOfFileName + 1);
                    try {
                        this.findByName(name);
                    } catch (NoResultException e) {
                        getLog().warn( "Creating custom mail template from name: {}", name);
                        MailTemplate mt = new MailTemplate();
                        InputStream is = templatePath.openStream();
                        BufferedReader br = new BufferedReader(new InputStreamReader(is));
                        StringBuilder content = new StringBuilder();
                        String line = br.readLine();
                        while (line != null) {
                            content.append(line);
                            line = br.readLine();
                        }
                        mt.setDescription("Static mail template autogenerated!");
                        mt.setName(name);
                        mt.setContent(content.toString());
                        this.save(mt);

                    }
                }

            }
        } catch (IOException e) {
            getLog().error( e.getMessage(), e);
        }
    }

    @Activate
    public void createDefaultTemplates() {
        Bundle mailTemplateServiceBundle = HyperIoTUtil.getBundleContext(this.getClass())
            .getBundle(String.format("mvn:it.acsoftware.hyperiot.mail/HyperIoTMail-service/%s", BuildProperties.getHyperIoTVersion()));
        this.createTemplate(mailTemplateServiceBundle,"templates");
    }
}
